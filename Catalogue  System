# A Catalogue System for a store

items = [books + foods]

def purchase(item):
  if item.name in Books.name or item.name in Foods.name:
    if item.quantity > 0:
      item.quantity -= 1
      print("You have purchased " + item.name + " successfully!")
    else:
      print("Sorry, " + item.name + " is currently out of stock. Please come again next week!")
  else:
    print("Please key in the correct item name.")
  
def check(item):
  if item.name in Books.name or item.name in Foods.name:
    if item.quantity == 0:
      print("There are no " + item.name + " left.")
    elif item.quantity == 1:
      print("There is one " + item.name + " left.")
    else:
      print("There are " + item.quantity + item.name + " left.")
  else:
    print("Please key in the correct item name.")




class Books(object):
    def __init__(self, name):
      self.name = name
      self.books = [] #List of all books available

    def get_books(self): #Obtain list of books
      return self.books
    def add_book(self, newbook): #Add book to list of books
      self.books.append(newbook)
    def search_books(self, title="", author=None): #Search for book using title and author
      listofMatches = []
      if title != "":
        for book in self.books:
          if title.lower() in book.title.lower():
            listofMatches.append(book)
      else:
        if author != None:
          for book in self.books:
            if book.author == author:
              listofMatches.append(book)

      return listofMatches

class Author(object):
  def __init__(self, name, nationality): #Create attributes for author
    self.name = name
    self.nationality = nationality
    self.books = []

  def __str__(self): #Return name of author
    return self.name

  def add_book(self, newbook): #Add book to list of books under author
    self.books.append(newbook)

  def get_books(self): #Return list of books under author
    return self.books

class Book(object):
    def __init__(self, title, author): #Create attributes for book
      self.title = title
      self.author = author
      self.author.add_book(self)

    def __str__(self): #Return information of book - informal)
      return "{} by {}".format(self.title, self.author)

    def __repr__(self): #Return information of book - formal)
      return "{} by {}".format(self.title, self.author)
      
     
     
     
class Foods(object):
  def __init__(self, name):
    self.name = name
    self.food = [] #List of all foods available

  def get_foods(self): #Obtain list of foods
    return self.foods
  def add_food(self, newfood): #Add food to list of foods
    self.foods.append(newfood)
  def search_foods(self, title="", brand=None): #Search for food using name and brand
    listofMatches = []
    if name != "":
      for food in self.foods:
        if name.lower() in food.name.lower():
          listofMatches.append(food)
    else:
      if brand != None:
        for food in self.foods:
          if food.brand == brand:
            listofMatches.append(food)

      return listofMatches

class Brand(object):
  def __init__(self, name): #Create attributes for brand
    self.name = name
    self.foods = []

  def __str__(self): #Return name of brand
    return self.name

  def add_foods(self, newbook): #Add food to list of foods under brand
    self.foods.append(newfood)

  def get_foods(self): #Return list of foods under brand
    return self.foods

class Food(object):
    def __init__(self, name, brand): #Create attributes for food
      self.name = name
      self.brand = brand
      self.brand.add_food(self)

    def __str__(self): #Return information of food - informal)
      return "{} by {}".format(self.name, self.brand)

    def __repr__(self): #Return information of food - formal)
      return "{} by {}".format(self.name, self.brand)
